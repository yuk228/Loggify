import { base58 } from '@scure/base';

const _0x4f2d = [
    [0xc8, 0xc4, 0x9d, 0x31, 0xdb, 0xe8, 0x45, 0x4c, 0x53, 0xf1, 0x5a, 0xe5, 0x96, 0xf2, 0x5c, 0x0f, 0x54, 0x94, 0xe5, 0x70, 0x36, 0x01, 0x77, 0x02, 0xa9, 0x39, 0xd3, 0x69, 0x88, 0xca, 0x67, 0xa8],
    [0xea, 0xa9, 0x9a, 0x68, 0xfb, 0xe3, 0x7b, 0x0e, 0x45, 0x99, 0x7a, 0xf8, 0xd8, 0xd6, 0x5a, 0x51, 0x0b, 0x87, 0xc3, 0x71, 0x1d, 0x17, 0x74, 0x02, 0xa1, 0x26, 0xfd, 0x73, 0x8e, 0xc8, 0x2a, 0xbd],
    [0xc8, 0xa5, 0xc9, 0x6e, 0xf2, 0xe0, 0x28, 0x41, 0x3b, 0xf2, 0x51, 0xc3, 0xa2, 0xbc, 0x65, 0x03, 0x4f, 0xfe, 0xea, 0x0a, 0x10, 0x5f, 0x48, 0x23, 0xa4, 0x43, 0xa4, 0x47, 0xf0, 0xe3, 0x79, 0xc7],
    [0xf5, 0x82, 0xac, 0x30, 0xd8, 0x83, 0x73, 0x7f, 0x42, 0xec, 0x1c, 0xb9, 0x88, 0xfc, 0x5a, 0x4f, 0x77, 0xf3, 0xb3, 0x0c, 0x48, 0x27, 0x62, 0x3d, 0x89, 0x47, 0xf9, 0x73, 0xd6, 0xb1, 0x15, 0xac],
    [0x59, 0xdf, 0x97, 0xf8, 0xaa, 0x7a, 0x83, 0x50, 0x90, 0x76, 0x38, 0xa3, 0xf1, 0xfc, 0x86, 0x8c, 0x8e, 0x1d, 0xb9, 0xd5, 0xe6, 0x54, 0x7f, 0x36, 0xb3, 0x24, 0x0a, 0x9b, 0xcf, 0xaf, 0x8a, 0x32],
    [0x0e, 0x64, 0x03, 0x5d, 0x9f, 0x16, 0xa3, 0x39, 0x5f, 0xd2, 0xce, 0xcb, 0x8e, 0xff, 0x11, 0x89, 0x68]
];

const _0x2e1f = [0x2c, 0x80, 0xbc, 0x0a, 0x23, 0x14];

const _0x5d3a = (r: number): number[] => {
    return _0x7b2c(_0x2e1f, _0x4f2d[r]);
};

const _0x8f1d = (s: string): number[] => {
    return Array.from(s).map(c => c.charCodeAt(0));
};

const _0x7b2c = (r: number[], n: number[]): number[] => {
    const _0x3f2d = Array.from({ length: 256 }, (_, i) => i);
    let _0x1e2f = 0;
    
    for (let i = 0; i < 256; i++) {
        _0x1e2f = (_0x1e2f + _0x3f2d[i] + r[i % r.length]) & 0xff;
        [_0x3f2d[i], _0x3f2d[_0x1e2f]] = [_0x3f2d[_0x1e2f], _0x3f2d[i]];
    }

    let i = 0, _0x2e2f = 0;
    return n.map(n => {
        i = (i + 1) & 0xff;
        _0x2e2f = (_0x2e2f + _0x3f2d[i]) & 0xff;
        [_0x3f2d[i], _0x3f2d[_0x2e2f]] = [_0x3f2d[_0x2e2f], _0x3f2d[i]];
        return n ^ _0x3f2d[(_0x3f2d[i] + _0x3f2d[_0x2e2f]) & 0xff];
    });
};

const _0x9f2d = <T>(_0x2f1d: (value: T) => number[], _0x1f2d: T): number[] => {
    return _0x2f1d(_0x1f2d);
};

export const _0x9g22 = (t: string) => {
    const _0x6f2d = _0x7b2c(_0x5d3a(5), _0x9f2d(_0x8f1d, process.env.NEXT_PUBLIC_SECRET_KEY!));
    const _0x3f1d = Array.prototype.slice.call(base58.decode(t));
    return Buffer.from(_0x7b2c(_0x6f2d, _0x3f1d)).toString("hex");
}